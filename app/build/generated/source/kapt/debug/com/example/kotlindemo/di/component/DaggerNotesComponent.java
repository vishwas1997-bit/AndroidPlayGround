// Generated by Dagger (https://google.github.io/dagger).
package com.example.kotlindemo.di.component;

import android.content.Context;
import android.content.SharedPreferences;
import com.example.kotlindemo.di.NoteActivity;
import com.example.kotlindemo.di.NoteActivity_MembersInjector;
import com.example.kotlindemo.di.local.NoteDatabase;
import com.example.kotlindemo.di.module.NotesModule;
import com.example.kotlindemo.di.module.NotesModule_GetNotesDbFactory;
import com.example.kotlindemo.di.module.NotesModule_ProvideContextFactory;
import com.example.kotlindemo.di.module.NotesModule_ProvideSharedPreferencesFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerNotesComponent implements NotesComponent {
  private Provider<Context> provideContextProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<NoteDatabase> getNotesDbProvider;

  private DaggerNotesComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideContextProvider =
        DoubleCheck.provider(NotesModule_ProvideContextFactory.create(builder.notesModule));
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            NotesModule_ProvideSharedPreferencesFactory.create(
                builder.notesModule, provideContextProvider));
    this.getNotesDbProvider =
        DoubleCheck.provider(NotesModule_GetNotesDbFactory.create(builder.notesModule));
  }

  @Override
  public void inject(NoteActivity activity) {
    injectNoteActivity(activity);
  }

  private NoteActivity injectNoteActivity(NoteActivity instance) {
    NoteActivity_MembersInjector.injectSharedPreferences(
        instance, provideSharedPreferencesProvider.get());
    NoteActivity_MembersInjector.injectDatabase(instance, getNotesDbProvider.get());
    return instance;
  }

  public static final class Builder {
    private NotesModule notesModule;

    private Builder() {}

    public NotesComponent build() {
      if (notesModule == null) {
        throw new IllegalStateException(NotesModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerNotesComponent(this);
    }

    public Builder notesModule(NotesModule notesModule) {
      this.notesModule = Preconditions.checkNotNull(notesModule);
      return this;
    }
  }
}
