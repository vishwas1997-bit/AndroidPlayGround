// Generated by Dagger (https://dagger.dev).
package com.example.kotlindemo.notes_app.di.module;

import android.content.Context;
import com.example.kotlindemo.notes_app.data.db.AppDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideNoteDbFactory implements Factory<AppDatabase> {
  private final AppModule module;

  private final Provider<Context> mContextProvider;

  public AppModule_ProvideNoteDbFactory(AppModule module, Provider<Context> mContextProvider) {
    this.module = module;
    this.mContextProvider = mContextProvider;
  }

  @Override
  public AppDatabase get() {
    return provideNoteDb(module, mContextProvider.get());
  }

  public static AppModule_ProvideNoteDbFactory create(AppModule module,
      Provider<Context> mContextProvider) {
    return new AppModule_ProvideNoteDbFactory(module, mContextProvider);
  }

  public static AppDatabase provideNoteDb(AppModule instance, Context mContext) {
    return Preconditions.checkNotNullFromProvides(instance.provideNoteDb(mContext));
  }
}
