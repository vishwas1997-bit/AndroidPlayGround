// Generated by Dagger (https://google.github.io/dagger).
package com.example.kotlindemo.notes_app.di.module;

import android.content.Context;
import com.example.kotlindemo.notes_app.data.db.NoteDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideNoteDbFactory implements Factory<NoteDatabase> {
  private final AppModule module;

  private final Provider<Context> mContextProvider;

  public AppModule_ProvideNoteDbFactory(AppModule module, Provider<Context> mContextProvider) {
    this.module = module;
    this.mContextProvider = mContextProvider;
  }

  @Override
  public NoteDatabase get() {
    return provideInstance(module, mContextProvider);
  }

  public static NoteDatabase provideInstance(AppModule module, Provider<Context> mContextProvider) {
    return proxyProvideNoteDb(module, mContextProvider.get());
  }

  public static AppModule_ProvideNoteDbFactory create(
      AppModule module, Provider<Context> mContextProvider) {
    return new AppModule_ProvideNoteDbFactory(module, mContextProvider);
  }

  public static NoteDatabase proxyProvideNoteDb(AppModule instance, Context mContext) {
    return Preconditions.checkNotNull(
        instance.provideNoteDb(mContext),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
