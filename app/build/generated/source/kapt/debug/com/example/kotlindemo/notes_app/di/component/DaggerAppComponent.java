// Generated by Dagger (https://dagger.dev).
package com.example.kotlindemo.notes_app.di.component;

import android.app.Application;
import android.content.Context;
import com.example.kotlindemo.App;
import com.example.kotlindemo.notes_app.data.AppDataManger;
import com.example.kotlindemo.notes_app.data.AppDataManger_Factory;
import com.example.kotlindemo.notes_app.data.DataManger;
import com.example.kotlindemo.notes_app.data.db.AppDatabase;
import com.example.kotlindemo.notes_app.data.db.AppDbHelper;
import com.example.kotlindemo.notes_app.data.db.AppDbHelper_Factory;
import com.example.kotlindemo.notes_app.data.db.DbHelper;
import com.example.kotlindemo.notes_app.di.module.AppModule;
import com.example.kotlindemo.notes_app.di.module.AppModule_ProvideContextFactory;
import com.example.kotlindemo.notes_app.di.module.AppModule_ProvideDataMangerFactory;
import com.example.kotlindemo.notes_app.di.module.AppModule_ProvideDbHelperFactory;
import com.example.kotlindemo.notes_app.di.module.AppModule_ProvideNoteDbFactory;
import com.example.kotlindemo.notes_app.di.module.AppModule_ProvideSchedulerFactory;
import com.example.kotlindemo.utils.rxJava.SchedulerProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new AppComponentImpl(new AppModule(), application);
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final AppModule appModule;

    private final AppComponentImpl appComponentImpl = this;

    private Provider<Application> applicationProvider;

    private Provider<Context> provideContextProvider;

    private Provider<AppDatabase> provideNoteDbProvider;

    private Provider<AppDbHelper> appDbHelperProvider;

    private Provider<DbHelper> provideDbHelperProvider;

    private Provider<AppDataManger> appDataMangerProvider;

    private Provider<DataManger> provideDataMangerProvider;

    private AppComponentImpl(AppModule appModuleParam, Application applicationParam) {
      this.appModule = appModuleParam;
      initialize(appModuleParam, applicationParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AppModule appModuleParam, final Application applicationParam) {
      this.applicationProvider = InstanceFactory.create(applicationParam);
      this.provideContextProvider = AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider);
      this.provideNoteDbProvider = DoubleCheck.provider(AppModule_ProvideNoteDbFactory.create(appModuleParam, provideContextProvider));
      this.appDbHelperProvider = AppDbHelper_Factory.create(provideNoteDbProvider);
      this.provideDbHelperProvider = AppModule_ProvideDbHelperFactory.create(appModuleParam, appDbHelperProvider);
      this.appDataMangerProvider = DoubleCheck.provider(AppDataManger_Factory.create(provideDbHelperProvider));
      this.provideDataMangerProvider = DoubleCheck.provider(AppModule_ProvideDataMangerFactory.create(appModuleParam, appDataMangerProvider));
    }

    @Override
    public void inject(App app) {
    }

    @Override
    public DataManger getDataManager() {
      return provideDataMangerProvider.get();
    }

    @Override
    public SchedulerProvider getSchedulerProvider() {
      return AppModule_ProvideSchedulerFactory.provideScheduler(appModule);
    }
  }
}
