// Generated by Dagger (https://dagger.dev).
package com.example.kotlindemo.notes_app.di.component;

import com.example.kotlindemo.notes_app.NoteViewModel;
import com.example.kotlindemo.notes_app.di.module.FragmentModule;
import com.example.kotlindemo.notes_app.di.module.FragmentModule_ProvideNoteViewModelFactory;
import com.example.kotlindemo.notes_app.ui.base.BaseFragment_MembersInjector;
import com.example.kotlindemo.notes_app.ui.fragment.NoteAddFragment;
import com.example.kotlindemo.notes_app.ui.fragment.NoteListFragment;
import com.example.kotlindemo.notes_app.ui.fragment.NoteUpdateFragment;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFragmentComponent {
  private DaggerFragmentComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private FragmentModule fragmentModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder fragmentModule(FragmentModule fragmentModule) {
      this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public FragmentComponent build() {
      Preconditions.checkBuilderRequirement(fragmentModule, FragmentModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new FragmentComponentImpl(fragmentModule, appComponent);
    }
  }

  private static final class FragmentComponentImpl implements FragmentComponent {
    private final FragmentModule fragmentModule;

    private final AppComponent appComponent;

    private final FragmentComponentImpl fragmentComponentImpl = this;

    private FragmentComponentImpl(FragmentModule fragmentModuleParam,
        AppComponent appComponentParam) {
      this.fragmentModule = fragmentModuleParam;
      this.appComponent = appComponentParam;

    }

    private NoteViewModel noteViewModel() {
      return FragmentModule_ProvideNoteViewModelFactory.provideNoteViewModel(fragmentModule, Preconditions.checkNotNullFromComponent(appComponent.getDataManager()), Preconditions.checkNotNullFromComponent(appComponent.getSchedulerProvider()));
    }

    @Override
    public void inject(NoteListFragment fragment) {
      injectNoteListFragment(fragment);
    }

    @Override
    public void inject(NoteAddFragment fragment) {
      injectNoteAddFragment(fragment);
    }

    @Override
    public void inject(NoteUpdateFragment fragment) {
    }

    private NoteListFragment injectNoteListFragment(NoteListFragment instance) {
      BaseFragment_MembersInjector.injectSetMViewModel(instance, noteViewModel());
      return instance;
    }

    private NoteAddFragment injectNoteAddFragment(NoteAddFragment instance) {
      BaseFragment_MembersInjector.injectSetMViewModel(instance, noteViewModel());
      return instance;
    }
  }
}
