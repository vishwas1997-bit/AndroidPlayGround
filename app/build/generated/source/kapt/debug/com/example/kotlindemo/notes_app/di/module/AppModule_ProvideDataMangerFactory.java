// Generated by Dagger (https://dagger.dev).
package com.example.kotlindemo.notes_app.di.module;

import com.example.kotlindemo.notes_app.data.AppDataManger;
import com.example.kotlindemo.notes_app.data.DataManger;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDataMangerFactory implements Factory<DataManger> {
  private final AppModule module;

  private final Provider<AppDataManger> appDataMangerProvider;

  public AppModule_ProvideDataMangerFactory(AppModule module,
      Provider<AppDataManger> appDataMangerProvider) {
    this.module = module;
    this.appDataMangerProvider = appDataMangerProvider;
  }

  @Override
  public DataManger get() {
    return provideDataManger(module, appDataMangerProvider.get());
  }

  public static AppModule_ProvideDataMangerFactory create(AppModule module,
      Provider<AppDataManger> appDataMangerProvider) {
    return new AppModule_ProvideDataMangerFactory(module, appDataMangerProvider);
  }

  public static DataManger provideDataManger(AppModule instance, AppDataManger appDataManger) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataManger(appDataManger));
  }
}
